#BlueJ class context
comment0.target=Retangulo
comment0.text=\r\n\ Representa\ um\ retangulo\ definido\ por\ dois\ pontos\ opostos\ (p1\ e\ p2).\r\n\ A\ partir\ desses\ pontos,\ os\ outros\ dois\ cantos\ (p3\ e\ p4)\ sao\ calculados\r\n\ automaticamente,\ formando\ um\ retangulo\ alinhado\ aos\ eixos\ cartesianos.\r\n\ \r\n\ <p>Exemplo\ de\ uso\:</p>\r\n\ <pre>\r\n\ \ \ \ \ Ponto\ p1\ \=\ new\ Ponto(0,\ 0);\r\n\ \ \ \ \ Ponto\ p2\ \=\ new\ Ponto(4,\ 3);\r\n\ \ \ \ \ Retangulo\ r\ \=\ new\ Retangulo(p1,\ p2);\r\n\ </pre>\r\n\ \r\n\ Nesse\ exemplo,\ o\ retangulo\ e\ formado\ pelos\ pontos\ (0,0),\ (4,3),\ (0,3)\ e\ (4,0).\r\n\ \r\n\ @author\ Amora\ Marinho\ Machado\r\n\ @author\ Gabriel\ Azevedo\ Cruz\r\n\ @author\ Gabriel\ Mechi\ Lima\r\n\ @author\ Luiz\ Fernando\ de\ Marchi\ Andrade\r\n\ @version\ 05/09/2025\r\n
comment1.params=p1\ p2
comment1.target=Retangulo(ponto.Ponto,\ ponto.Ponto)
comment1.text=\r\n\ Constroi\ um\ retangulo\ a\ partir\ de\ dois\ pontos\ opostos.\r\n\ Os\ outros\ dois\ cantos\ sao\ calculados\ automaticamente.\r\n\r\n\ @param\ p1\ um\ dos\ cantos\ do\ retangulo\r\n\ @param\ p2\ o\ canto\ oposto\ a\ p1\r\n
comment10.params=
comment10.target=org.json.JSONObject\ toJson()
comment10.text=\r\n\ Converte\ o\ retangulo\ para\ formato\ JSON.\r\n\ \r\n\ @return\ JSONObject\ representando\ o\ retangulo\r\n
comment11.params=json
comment11.target=Retangulo\ fromJson(org.json.JSONObject)
comment11.text=\r\n\ Cria\ um\ Retangulo\ a\ partir\ de\ um\ JSONObject.\r\n\ \r\n\ @param\ json\ JSONObject\ contendo\ os\ dados\ do\ retangulo\r\n\ @return\ novo\ objeto\ Retangulo\r\n
comment12.params=jsonArray
comment12.target=java.util.List\ fromJsonArray(org.json.JSONArray)
comment12.text=\r\n\ Cria\ uma\ lista\ de\ Retangulos\ a\ partir\ de\ um\ JSONArray.\r\n\ \r\n\ @param\ jsonArray\ JSONArray\ contendo\ retangulos\r\n\ @return\ lista\ de\ objetos\ Retangulo\r\n
comment2.params=
comment2.target=void\ calcularP3P4()
comment2.text=\r\n\ Calcula\ os\ pontos\ p3\ e\ p4\ com\ base\ em\ p1\ e\ p2.\r\n\ p3\ tera\ a\ coordenada\ X\ de\ p1\ e\ a\ coordenada\ Y\ de\ p2.\r\n\ p4\ tera\ a\ coordenada\ X\ de\ p2\ e\ a\ coordenada\ Y\ de\ p1.\r\n
comment3.params=
comment3.target=ponto.Ponto\ getP1()
comment3.text=\r\n\ Retorna\ o\ ponto\ p1.\r\n\r\n\ @return\ o\ ponto\ p1\r\n
comment4.params=p1
comment4.target=void\ setP1(ponto.Ponto)
comment4.text=\r\n\ Define\ o\ ponto\ p1\ e\ recalcula\ os\ outros\ cantos\ do\ retangulo.\r\n\r\n\ @param\ p1\ o\ novo\ ponto\ p1\r\n
comment5.params=
comment5.target=ponto.Ponto\ getP2()
comment5.text=\r\n\ Retorna\ o\ ponto\ p2.\r\n\r\n\ @return\ o\ ponto\ p2\r\n
comment6.params=p2
comment6.target=void\ setP2(ponto.Ponto)
comment6.text=\r\n\ Define\ o\ ponto\ p2\ e\ recalcula\ os\ outros\ cantos\ do\ retangulo.\r\n\r\n\ @param\ p2\ o\ novo\ ponto\ p2\r\n
comment7.params=
comment7.target=ponto.Ponto\ getP3()
comment7.text=\r\n\ Retorna\ o\ ponto\ p3,\ calculado\ automaticamente.\r\n\r\n\ @return\ o\ ponto\ p3\r\n
comment8.params=
comment8.target=ponto.Ponto\ getP4()
comment8.text=\r\n\ Retorna\ o\ ponto\ p4,\ calculado\ automaticamente.\r\n\r\n\ @return\ o\ ponto\ p4\r\n
comment9.params=x\ y
comment9.target=void\ atualizarP2(int,\ int)
comment9.text=\r\n\ Atualiza\ o\ ponto\ p2\ (canto\ oposto)\ do\ retangulo\ e\ recalcula\ os\ outros\ cantos.\r\n\ \r\n\ @param\ x\ nova\ coordenada\ x\ do\ ponto\ p2\r\n\ @param\ y\ nova\ coordenada\ y\ do\ ponto\ p2\r\n
numComments=13
