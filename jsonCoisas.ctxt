#BlueJ class context
comment0.target=jsonCoisas
comment0.text=\r\n\ Utilitario\ para\ salvar\ e\ carregar\ figuras\ em\ formato\ JSON.\r\n\ Fornece\ metodos\ para\ serializacao\ e\ desserializacao\ de\ primitivos\ graficos.\r\n\ \r\n\ @author\ Amora\ Marinho\ Machado\r\n\ @author\ Gabriel\ Azevedo\ Cruz\r\n\ @author\ Gabriel\ Mechi\ Lima\r\n\ @author\ Luiz\ Fernando\ de\ Marchi\ Andrade\r\n\ @version\ 05/09/2025\r\n
comment1.params=pontos\ retas\ circulos\ triangulos\ retangulos\ caminhoArquivo
comment1.target=void\ salvarFiguras(java.util.List,\ java.util.List,\ java.util.List,\ java.util.List,\ java.util.List,\ java.lang.String)
comment1.text=\r\n\ Salva\ as\ listas\ de\ figuras\ em\ um\ arquivo\ JSON.\r\n\ Cria\ um\ arquivo\ JSON\ formatado\ contendo\ todas\ as\ figuras\ desenhadas.\r\n\ \r\n\ @param\ pontos\ lista\ de\ pontos\ a\ serem\ salvos\r\n\ @param\ retas\ lista\ de\ retas\ a\ serem\ salvas\r\n\ @param\ circulos\ lista\ de\ circulos\ a\ serem\ salvos\r\n\ @param\ triangulos\ lista\ de\ triangulos\ a\ serem\ salvos\r\n\ @param\ retangulos\ lista\ de\ retangulos\ a\ serem\ salvos\r\n\ @param\ caminhoArquivo\ caminho\ do\ arquivo\ onde\ sera\ salvo\ o\ JSON\r\n\ @throws\ IOException\ se\ houver\ erro\ ao\ escrever\ no\ arquivo\r\n
comment2.params=caminhoArquivo
comment2.target=jsonCoisas.FigurasContainer\ lerFiguras(java.lang.String)
comment2.text=\r\n\ Le\ as\ listas\ de\ figuras\ de\ um\ arquivo\ JSON.\r\n\ Carrega\ e\ deserializa\ todas\ as\ figuras\ contidas\ no\ arquivo.\r\n\ \r\n\ @param\ caminhoArquivo\ caminho\ do\ arquivo\ JSON\ a\ ser\ lido\r\n\ @return\ objeto\ container\ com\ todas\ as\ listas\ de\ figuras\ lidas\r\n\ @throws\ IOException\ se\ houver\ erro\ ao\ ler\ o\ arquivo\r\n\ @throws\ JSONException\ se\ o\ formato\ JSON\ for\ invalido\r\n
comment3.params=pontos
comment3.target=org.json.JSONArray\ pontosToJsonArray(java.util.List)
comment3.text=\r\n\ Converte\ lista\ de\ pontos\ em\ JSONArray.\r\n\ \r\n\ @param\ pontos\ lista\ de\ pontos\ a\ converter\r\n\ @return\ JSONArray\ contendo\ representacao\ JSON\ de\ cada\ ponto\r\n
comment4.params=retas
comment4.target=org.json.JSONArray\ retasToJsonArray(java.util.List)
comment4.text=\r\n\ Converte\ lista\ de\ retas\ em\ JSONArray.\r\n\ \r\n\ @param\ retas\ lista\ de\ retas\ a\ converter\r\n\ @return\ JSONArray\ contendo\ representacao\ JSON\ de\ cada\ reta\r\n
comment5.params=circulos
comment5.target=org.json.JSONArray\ circulosToJsonArray(java.util.List)
comment5.text=\r\n\ Converte\ lista\ de\ circulos\ em\ JSONArray.\r\n\ \r\n\ @param\ circulos\ lista\ de\ circulos\ a\ converter\r\n\ @return\ JSONArray\ contendo\ representacao\ JSON\ de\ cada\ circulo\r\n
comment6.params=triangulos
comment6.target=org.json.JSONArray\ triangulosToJsonArray(java.util.List)
comment6.text=\r\n\ Converte\ lista\ de\ triangulos\ em\ JSONArray.\r\n\ \r\n\ @param\ triangulos\ lista\ de\ triangulos\ a\ converter\r\n\ @return\ JSONArray\ contendo\ representacao\ JSON\ de\ cada\ triangulo\r\n
comment7.params=retangulos
comment7.target=org.json.JSONArray\ retangulosToJsonArray(java.util.List)
comment7.text=\r\n\ Converte\ lista\ de\ retangulos\ em\ JSONArray.\r\n\ \r\n\ @param\ retangulos\ lista\ de\ retangulos\ a\ converter\r\n\ @return\ JSONArray\ contendo\ representacao\ JSON\ de\ cada\ retangulo\r\n
numComments=8
